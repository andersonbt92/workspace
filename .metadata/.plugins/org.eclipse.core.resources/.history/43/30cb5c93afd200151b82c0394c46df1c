import java.io.*;
import java.util.Scanner;

/*
 * A class that reads in a integer file from the command line and outputs the top 10000 numbers in descending order
 * into a text file named "richest.output"
 */
public class Richest {
	
	static final int  MAX_NUM_IN_RAM = 10000; //The maximum amount of numbers the program can take at one time

		public static void main(String[] args) throws FileNotFoundException 
		{
			String fileName = null;
			if(args.length>0)
			{
				fileName = args[0]; //Accept a file name from the command line
			}
			if(fileName == null)
			{
				System.out.println("No file was inputed"); 
			}
			else
			{
			MinHeap heap = readInNumbers(new FileReader(fileName)); //Read in the numbers from the file
			heap.heapSort(); //Sort the heap for output
			outputToFile(heap); //Output the file
			System.out.println("Program complete"); //Finish the program
			}
		}
		
		/*
		 * Takes in number from a file, creates a min heap from the first chunk of numbers, then compares each number
		 * left in the file to the root of the min heap to get the top numbers in the file.
		 */
		private static MinHeap readInNumbers(FileReader readFile) throws FileNotFoundException
		{
			int[] initalHeap = new int [(MAX_NUM_IN_RAM+1)]; //Make a 1 based index array
			Scanner input = new Scanner(readFile);
			MinHeap heap = null;
			if(input.hasNext()) //There is at least one number in the file
			{
				int i=1; //For one based indexing
				try {
					while(input.hasNext() && i<((MAX_NUM_IN_RAM+1))) //input the max amount of numbers into the heap
						{
								initalHeap[i] = input.nextInt();
								i++;
						}

					if(heap == null) //we haven't created a heap yet
						heap = new MinHeap(initalHeap); //create the initalHeap

					while(input.hasNext())	//While there are numbers in the file
						{
							heap.compareWithRoot(input.nextInt()); //Compare them with the root	
						}
				}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					input.close();
					
				}
			return heap;
			}

			/*
			 * Outputs a heap to a file named richest.output
			 */
			private static void outputToFile(MinHeap heap)
			{
				int[] output = heap.getHeapArray(); //get the array from the heap
				try {
					BufferedWriter writer = new BufferedWriter(new FileWriter("richest.output"));
					for ( int i=1;i<output.length;i++)
					{      
						writer.write(output[i] + "\n");
						//System.out.println(output[i]); //For testing
					}
					writer.close();
				} catch(IOException ex) {
					ex.printStackTrace();
				}
			}
		}
